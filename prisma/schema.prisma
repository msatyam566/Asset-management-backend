generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STAFF
  SHOPOWNER
}





model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  role        Role     @default(STAFF)    // it can be user also after demo this user will become shopowner
  email       String   @unique
  name        String
  password    String
  mobile      String   @unique
  isDeleted   Boolean  @default(false)
  otp         String?
  otpExpiresAt DateTime?
  shopId      String?    @db.ObjectId
  monthlyTarget  Float     @default(0.0) // Sales target for the staff
  totalSales     Float     @default(0.0)
  shop        Shop?    
  tokens      Token[]
  sales       Sales[]  // Relation to Sales

  
}

model Shop {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  ownerId   String    @unique @db.ObjectId // Marked as unique for a one-to-one relation
  owner     User      @relation(fields: [ownerId], references: [id]) // Defined here as the owner
  products  Product[]
  category Category[]
  sales     Sales[]   // Relation to Sales
  invoice Invoice[]
  token Token[]
  createdAt DateTime  @default(now())
}

model Token {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  shopId       String?   @db.ObjectId
  token        String   @unique
  refreshToken String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])
  shop         Shop?     @relation(fields: [shopId], references: [id])
}

model ResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  expiresAt DateTime @map("expires_at")
}


model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  sku String @unique
  name   String
  quantity      Int
  description   String
  tax           String
  price         Float
  totalPrice    Float
  barCode       String?
  createdAt     DateTime  @default(now())
  productImage  String[]
  productDetails ProductDetail[]
  sales         Sales[] 
  createdById   String    @db.ObjectId
  createdBy     Shop      @relation(fields: [createdById], references: [id])
  categoryId    String    @db.ObjectId   // Add this field
  category      Category  @relation(fields: [categoryId], references: [id]) // Define the relation
}

model Category {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description  String
  createdById   String?    @db.ObjectId
  createdBy     Shop?      @relation(fields: [createdById], references: [id])
  products  Product[] // Define the one-to-many relationship

}

model Payment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  paymentMethod String
  paymentStatus Boolean @default(false)
  paymentDate  DateTime  @default(now())
  amount       Float
  invoice Invoice[]

}



model Invoice{
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber String @unique
  invoiceDate    DateTime
  totalAmount Float
  productDetails  ProductDetail[]  // Relation to ProductDetail for sold products
  shopId          String    @db.ObjectId  // Relation field for Shop
  shop            Shop      @relation(fields: [shopId], references: [id])
  createdAt DateTime  @default(now())
  payment        Payment?        @relation(fields: [paymentId], references: [id])
  paymentId      String?         @db.ObjectId
  customerId    String       @db.ObjectId
  customer      Customer     @relation(fields: [customerId], references: [id]) // New relation to Customer
}


model Customer {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  phone        String    @unique
  totalSpent  Float    @default(0.0)
  invoices     Invoice[] // Relation to the invoices generated for this customer
  createdAt    DateTime  @default(now())
}


model ProductDetail {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId  // Reference to the Product
  product     Product  @relation(fields: [productId], references: [id])
  productName String
  quantity    Int      // Quantity of the product sold
  price       Float    // Price of the product at the time of sale
  totalPrice  Float    // Total price for this product (price * quantity)
  invoiceId   String   @db.ObjectId  // Reference to the Invoice
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
}


model Sales {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  salesNumber String @unique @default("")
  productId    String    @db.ObjectId
  product      Product   @relation(fields: [productId], references: [id])
  shopId       String    @db.ObjectId
  shop         Shop      @relation(fields: [shopId], references: [id])
  userId       String    @db.ObjectId
  user         User      @relation(fields: [userId], references: [id]) // Staff who made the sale
  quantity     Int
  totalAmount  Float
  saleDate     DateTime  @default(now())
}